# coding=utf-8
from bs4 import BeautifulSoup

# initial the matrix
# need utf-8 to deal with other locale
#  like zh jp ko
# returns like
# ['Token', 0]
# ['Blacklisted?', 0]
# ['Cancelled', xx]
# ['Confirmed', xx]
# ['NoEvent', xx]
# ['ja', xx]
# ['ko', xx]
# ['zh', xx]


def token_cal(html):
    soup = BeautifulSoup(html, "html5lib")
    result = []
    for head in soup.find_all('thead'):
        for i in range(len(head.find_all('th'))):
            key = head.find_all('th')[i].get_text().encode('utf-8')
            result.append([key, 0])

    for body in soup.find_all('tbody'):
        for tr in body.find_all('tr'):
            _td = tr.find_all('td')
            for i in range(len(_td)):
                if i == 0 or i == 1:
                    continue
                val = _td[i].get_text().encode('utf-8')
                if val == '-':
                    continue
                result[i][1] += int(val)
    return result

# supporting filter one token
# useage: (html, 'token1')
def token_cal_without_toekn(html, flag):
    soup = BeautifulSoup(html, "html5lib")
    result = []
    for head in soup.find_all('thead'):
        for i in range(len(head.find_all('th'))):
            key = head.find_all('th')[i].get_text().encode('utf-8')
            result.append([key, 0])

    for body in soup.find_all('tbody'):
        for tr in body.find_all('tr'):
            _td = tr.find_all('td')
            for i in range(len(_td)):
                val = _td[i].get_text().encode('utf-8')
                # if the token == flag, skip
                if val == flag:
                    break
                if i == 0 or i == 1:
                    continue

                if val == '-':
                    continue
                result[i][1] += int(val)
    return result

# supporting filter token as a list
# useage: (html, ['token1','token2','token2'...])
def token_cal_without_toekn_list(html, flag_list):
    soup = BeautifulSoup(html, "html5lib")
    result = []
    for head in soup.find_all('thead'):
        for i in range(len(head.find_all('th'))):
            key = head.find_all('th')[i].get_text().encode('utf-8')
            result.append([key, 0])

    for body in soup.find_all('tbody'):
        for tr in body.find_all('tr'):
            _td = tr.find_all('td')
            for i in range(len(_td)):
                val = _td[i].get_text().encode('utf-8')
                # if the token == flag, skip
                if val in flag_list:
                    break
                if i == 0 or i == 1:
                    continue

                if val == '-':
                    continue
                result[i][1] += int(val)
    return result





data = []
def token_matrix_generator(html):
    soup = BeautifulSoup(html, "html5lib")
    for head in soup.find_all('thead'):
        _row = []
        for i in range(len(head.find_all('th'))):
            key = head[i].encode('utf-8')
            data.append(key)
        data.append(_row)
    for body in soup.find_all('tbody'):
        for tr in body.find_all('tr'):
            _td = tr.find_all('td')
            _row = []
            for i in range(len(_td)):
                key = _td[i].get_text().encode('utf-8')
                _row.append(key)
            data.append(_row)






# matrix is generated by previous token weights

def on_given_keyword_suggestion(matrix, keyword):
    cur_case = ['',float('-inf')]

    for i in range(2,5):
        entry = matrix[i]
        print(entry)
        if entry[1]>cur_case[1]:
            cur_case[0] = entry[0]
            cur_case[1] = entry[1]


    return matrix

def on_given_keyword_locale(matrix, locale):

    cur_case = ['',float('-inf')]

    for i in range(5,len(matrix)):
        entry = matrix[i]
        print(entry)
        if entry[1]>cur_case[1]:
            cur_case[0] = entry[0]
            cur_case[1] = entry[1]

    print(cur_case)
    return matrix

def print_result(list):
    for i in list:
        print(i)

'''

html = open('table.html')
token_matrix_generator(html)
print(data)

d1 =[1,2]
d2 = []
d2.append(d1)
print(d2)
#token_cal_list = token_cal(html)
#data = token_matrix_generate(html)
#on_given_keyword_locale(data,'')

html.close()
'''

html = open('table.html')
token_cal_list = token_cal(html)
html.close()


html = open('table.html')
token_cal_without_toekn_list = token_cal_without_toekn_list(html, ['con'])
html.close()


print_result(token_cal_list)
print('=========================')
print_result(token_cal_without_toekn_list)


